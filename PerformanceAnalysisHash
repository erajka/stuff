import java.io.*;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.TreeMap;

public class PerformanceAnalysisHash implements PerformanceAnalysis {

    // The input data from each file is stored in this/ per file
    private ArrayList<String> inputData;
    HashTable hashTableI = null;
    HashTable hashTableS = null;
    HashTable hashTable;
    TreeMap treeMapI = null;
    TreeMap treeMapS = null;
    TreeMap treeMap;
    String fileName;
    
    public PerformanceAnalysisHash() {
    }

    public PerformanceAnalysisHash(String details_filename) {
        //TODO: Save the details of the test data files
        try {
            loadData(details_filename);
          
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        try {
            Integer.parseInt(inputData.get(0));
            hashTableI = new HashTable<Integer, Integer>(11, 0.75);
            treeMapI = new TreeMap<Integer, Integer>();
        }
        catch (Exception e) {
            hashTableS = new HashTable<String, Integer>(11, 0.75); 
            treeMapS = new TreeMap<String, Integer>();
        }
        
      
    }
    
    /**
     * The important function that compares the implemented HashTable with
     * TreeMap of Java and generates the table with all the comparision details
     * This can internally call - compareInsertion, compareDeletion, CompareSearch
     * for all the test data provided.
     */
    @Override
    public void compareDataStructures() {
        if(hashTableI != null) {
            hashTable = hashTableI;
            treeMap = treeMapI;
        }
        else {
            hashTable = hashTableS;
            treeMap = treeMapS;
        }
        
      printReport();
      
    }

    @Override
    public void printReport() {
        compareInsertion();
        compareSearch();
        compareDeletion();
    }

    @Override
    public void compareInsertion() {
         
        hashTablePut(hashTable);
        treeMapPut(treeMap);
    }

    private void hashTablePut(HashTable hashTable) {
      //for hash table
        Runtime runtime = Runtime.getRuntime();
        
        long startTime = System.currentTimeMillis();
        
        for(int i = 0; i < inputData.size(); i++) {
             hashTable.put(inputData.get(i), (int) Math.random());
        }
        long stopTime = System.currentTimeMillis();
        
        long timeTaken = stopTime - startTime;
       
       
        runtime.gc();
        
        long bytesUsed = runtime.totalMemory() - runtime.freeMemory();
        
        System.out.printf("%n|%20s|%15s|%15s|%25d|%15d|", fileName, "PUT", "HASHTABLE", timeTaken, bytesUsed);
    }
    
    private void treeMapPut(TreeMap treeMap) {
        long startTime = System.currentTimeMillis();
        
        for(int i = 0; i < inputData.size(); i++) {
             treeMap.put(inputData.get(i), (int) Math.random());
        }
        long stopTime = System.currentTimeMillis();
        
        long timeTaken = stopTime - startTime;
       

        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        
        long bytesUsed = runtime.totalMemory() - runtime.freeMemory();
        
        System.out.printf("%n|%20s|%15s|%15s|%25d|%15d|", fileName, "PUT", "TREEMAP", timeTaken, bytesUsed);

    }
    
    @Override
    public void compareDeletion() {
        hashTableRemove(hashTable);
        treeMapRemove(treeMap);
    }
    
    private void hashTableRemove(HashTable hashTable) {
        Runtime runtime = Runtime.getRuntime();
        
        long startTime = System.currentTimeMillis();
        
        for(int i = 0; i < inputData.size(); i++) {
            try {
            hashTable.remove(inputData.get(i));
            }
            catch(NoSuchElementException e) {
                
            }
        }
        long stopTime = System.currentTimeMillis();
        
        long timeTaken = stopTime - startTime;
       
       
        runtime.gc();
        
        long bytesUsed = runtime.totalMemory() - runtime.freeMemory();
        
        System.out.printf("%n|%20s|%15s|%15s|%25d|%15d|", fileName, "REMOVE", "HASHTABLE", timeTaken, bytesUsed);

    }
    
    private void treeMapRemove(TreeMap treeMap) {
        Runtime runtime = Runtime.getRuntime();
        
        long startTime = System.currentTimeMillis();
        for(int i = 0; i < inputData.size(); i++) {
            try {
                treeMap.remove(inputData.get(i));
            }
            catch(NoSuchElementException e) {
                
            }
        }
        
        
        long stopTime = System.currentTimeMillis();
        
        long timeTaken = stopTime - startTime;
       
       
        runtime.gc();
        
        long bytesUsed = runtime.totalMemory() - runtime.freeMemory();
        
        System.out.printf("%n|%20s|%15s|%15s|%25d|%15d|", fileName, "REMOVE", "TREEMAP", timeTaken, bytesUsed);

    }

    @Override
    public void compareSearch() {
       
       hashTableGet(hashTable);
       treeMapGet(treeMap);
        
        
    }
    
    private void hashTableGet(HashTable hashTable) {
        long startTime = System.currentTimeMillis();
        
        
        for(int i = 0; i < inputData.size(); i++) {
            try { 
                hashTable.get(inputData.get(i));
            }
            catch(NoSuchElementException e) {
                
            }
        }
        
        long stopTime = System.currentTimeMillis();
        
        long timeTaken = stopTime - startTime;
        
       
        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        
        long bytesUsed = runtime.totalMemory() - runtime.freeMemory();
        
        System.out.printf("%n|%20s|%15s|%15s|%25d|%15d|", fileName, "GET", "HASHTABLE", timeTaken, bytesUsed);

    }

    private void treeMapGet(TreeMap treeMap) {
        long startTime = System.currentTimeMillis();
        
        
        for(int i = 0; i < inputData.size(); i++) {
            try { 
                treeMap.get(inputData.get(i));
            }
            catch(NoSuchElementException e) {
                
            }
        }
            
        long stopTime = System.currentTimeMillis();
        
        long timeTaken = stopTime - startTime;
        
       
        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        
        long bytesUsed = runtime.totalMemory() - runtime.freeMemory();
        
        System.out.printf("%n|%20s|%15s|%15s|%25d|%15d|", fileName, "GET", "TREEMAP", timeTaken, bytesUsed);

    }
    
    /*
    An implementation of loading files into local data structure is provided to you
    Please feel free to make any changes if required as per your implementation.
    However, this function can be used as is.
     */
    @Override
    public void loadData(String filename) throws IOException {

        // Opens the given test file and stores the objects each line as a string
        fileName = filename;
        File file = new File(filename);
        BufferedReader br = new BufferedReader(new FileReader(file));
        inputData = new ArrayList<>();
        String line = br.readLine();
        while (line != null) {
            inputData.add(line);
            line = br.readLine();
        }
        br.close();
    }
}
